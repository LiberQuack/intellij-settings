<templateSet group="Redux">
  <template name="rdxkeys" value="export enum $ENUM_NAMES$ActionKeys {&#10;    FETCH_INIT = &quot;$KEY_NAMES$_fetch_init&quot;,&#10;    FETCHED = &quot;$KEY_NAMES$_fetched&quot;&#10;}" description="Generates redux action keys boilerplate" toReformat="true" toShortenFQNames="true">
    <variable name="ENUM_NAMES" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="KEY_NAMES" expression="snakeCase(ENUM_NAMES)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rdxactions" value="import {Action, AnyAction} from &quot;redux&quot;&#10;import {ThunkAction} from &quot;redux-thunk&quot;&#10;&#10;export const $NAME$Actions = {&#10;&#10;    fetched($ARGUMENT_NAME$: Array&lt;any&gt;): AnyAction {&#10;        return {&#10;            type: $FETCHED_ACTION_TYPE$,&#10;            payload: $ARGUMENT_NAME$&#10;        }&#10;    },&#10;&#10;    fetchInited(): Action {&#10;        return {&#10;            type: $FETCH_INIT_ACTION_TYPE$&#10;        }&#10;    },&#10;&#10;    fetch(filters?: any): $FETCH_RETURN_TYPE$ {&#10;        return async (dispatch, getState, extraArguments) =&gt; {&#10;            dispatch(this.fetchInited());&#10;            const res = await fetch(&quot;http://httpbin.org/ip&quot;);&#10;            const json = await res.json();&#10;            dispatch(this.fetched(json))&#10;        }&#10;    }&#10;&#10;};&#10;" description="Generates redux actions boilerplate" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;Foo&quot;" alwaysStopAt="true" />
    <variable name="ARGUMENT_NAME" expression="decapitalize(NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="FETCHED_ACTION_TYPE" expression="" defaultValue="&quot;\&quot;foo_fetched\&quot;&quot;" alwaysStopAt="true" />
    <variable name="FETCH_INIT_ACTION_TYPE" expression="" defaultValue="&quot;\&quot;foo_fetch_init\&quot;&quot;" alwaysStopAt="true" />
    <variable name="FETCH_RETURN_TYPE" expression="" defaultValue="&quot;ThunkAction&lt;void, any, any&gt;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rdxreducer" value="import { AnyAction } from &quot;redux&quot;;&#10;&#10;export class $CLASS_NAME$State {&#10;    data = [];&#10;    isFetching = false;&#10;}&#10;&#10;export const $REDUCER_NAME$Reducer = (state = new $CLASS_NAME$State(), action:AnyAction) =&gt; {&#10;    switch (action.type) {&#10;&#10;        case $FETCH_INIT$:&#10;            return {...state, isFetching: true};&#10;&#10;        case $FETCHED$:&#10;            return {...state, isFetching: false, data: action.payload};&#10;&#10;        default:&#10;            return state;&#10;    }&#10;};&#10;" description="Generates redux reducer boilerplate" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="" defaultValue="&quot;Foo&quot;" alwaysStopAt="true" />
    <variable name="REDUCER_NAME" expression="decapitalize(CLASS_NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="FETCH_INIT" expression="" defaultValue="&quot;\&quot;fetch_inited\&quot;&quot;" alwaysStopAt="true" />
    <variable name="FETCHED" expression="" defaultValue="&quot;\&quot;fetched\&quot;&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>